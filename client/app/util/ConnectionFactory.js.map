{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["ConnectionFactory","connection","dbName","dbVersion","stores","closeFn","constructor","Error","getConnection","Promise","resolve","reject","console","log","openConnection","indexedDB","open","onupgradeneeded","event","_createStores","target","result","onsuccess","close","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection","Reflect","apply"],"mappings":";;;;;;AAAO,YAAMA,oBAAoB,CAAC,MAAM;AACtC,YAAIC,aAAa,IAAjB;AACA,cAAMC,SAAS,cAAf;AACA,cAAMC,YAAY,CAAlB;AACA,cAAMC,SAAS,CAAC,aAAD,CAAf;AACA,YAAIC,UAAU,IAAd;;AAEA,eAAO,MAAML,iBAAN,CAAwB;AAC7BM,wBAAc;AACZ,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,iBAAOC,aAAP,GAAuB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAIV,UAAJ,EAAgB;AACdW,wBAAQC,GAAR,CAAY,qBAAZ;AACA,uBAAOH,QAAQT,UAAR,CAAP;AACD;;AAED,oBAAMa,iBAAiBC,UAAUC,IAAV,CAAed,MAAf,EAAuBC,SAAvB,CAAvB;;AAEAW,6BAAeG,eAAf,GAAkCC,KAAD,IAAW;AAC1C,qBAAKC,aAAL,CAAmBD,MAAME,MAAN,CAAaC,MAAhC;AACD,eAFD;;AAIAP,6BAAeQ,SAAf,GAA4BJ,KAAD,IAAW;AACpCjB,6BAAaiB,MAAME,MAAN,CAAaC,MAA1B;AACAhB,0BAAUJ,WAAWsB,KAArB;;AAEAtB,2BAAWsB,KAAX,GAAmB,MAAM;AACvB,wBAAM,IAAIhB,KAAJ,CAAU,4CAAV,CAAN;AACD,iBAFD;;AAIAG,wBAAQQ,MAAME,MAAN,CAAaC,MAArB;AACD,eATD;;AAWAP,6BAAeU,OAAf,GAA0BN,KAAD,IAAWP,OAAOO,MAAME,MAAN,CAAaK,KAAb,CAAmBC,IAA1B,CAApC;AACD,aAxBM,CAAP;AAyBD;;AAED,iBAAOP,aAAP,CAAqBlB,UAArB,EAAiC;AAC/BG,mBAAOuB,OAAP,CAAgBC,KAAD,IAAW;AACxB,kBAAI3B,WAAW4B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC/C3B,2BAAW8B,iBAAX,CAA6BH,KAA7B;AACD;;AAED3B,yBAAW+B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,aAND;AAOD;;AAED,iBAAOC,eAAP,GAAyB;AACvB,gBAAI,CAACjC,UAAL,EAAiB,OAAO,KAAP;AACjBW,oBAAQC,GAAR,CAAY,oBAAZ;AACAsB,oBAAQC,KAAR,CAAc/B,OAAd,EAAuBJ,UAAvB,EAAmC,EAAnC;AACA,mBAAO,IAAP;AACD;AAhD4B,SAA/B;AAkDD,OAzDgC,GAA1B","file":"ConnectionFactory.js","sourcesContent":["export const ConnectionFactory = (() => {\n  let connection = null\n  const dbName = 'jscangaceiro'\n  const dbVersion = 2\n  const stores = ['negociacoes']\n  let closeFn = null\n\n  return class ConnectionFactory {\n    constructor() {\n      throw new Error('Não é possível criar instâncias dessa classe')\n    }\n\n    static getConnection() {\n      return new Promise((resolve, reject) => {\n        if (connection) {\n          console.log('connection cacheada')\n          return resolve(connection)\n        }\n\n        const openConnection = indexedDB.open(dbName, dbVersion)\n\n        openConnection.onupgradeneeded = (event) => {\n          this._createStores(event.target.result)\n        }\n\n        openConnection.onsuccess = (event) => {\n          connection = event.target.result\n          closeFn = connection.close\n\n          connection.close = () => {\n            throw new Error('Você não pode fechar diretamente a conexão')\n          }\n\n          resolve(event.target.result)\n        }\n\n        openConnection.onerror = (event) => reject(event.target.error.name)\n      })\n    }\n\n    static _createStores(connection) {\n      stores.forEach((store) => {\n        if (connection.objectStoreNames.contains(store)) {\n          connection.deleteObjectStore(store)\n        }\n\n        connection.createObjectStore(store, { autoIncrement: true })\n      })\n    }\n\n    static closeConnection() {\n      if (!connection) return false\n      console.log('fechando a conexão')\n      Reflect.apply(closeFn, connection, [])\n      return true\n    }\n  }\n})()\n"]}